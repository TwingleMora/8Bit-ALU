//'include"ALU.v"
`timescale 10ns/100ps
module TestBench1;
reg  CLK = 0;
reg [7:0]A,B;
reg [3:0]S;
wire [7:0] F,FF;
wire EQUAL,GT,LT,Zero,CarryOut,Overflow;

//always #1 CLK = ~CLK;
//initial $dumpfile("TestBench1.vcd");
//initial $dumpvars(0, TestBench1);


ALU aa(CLK,A,B,S,EQUAL,GT,LT,Zero,CarryOut,Overflow,F,FF);

initial begin
    //These events must be in chronological order.
    A = 8'b00000000;
    B = 8'b00000000;
	 S = 4'b0000;
    #10
    A = 8'b00001111;
    B = 8'b00000101;
	 S = 4'b0001;
    #10
    A = 8'b00001100;
    B = 8'b00001111;
	 S = 4'b0011;
    #10
    A = 8'b00001100;
    B = 8'b00000011;
	 S = 4'b1000;
    #10
    A = 8'b00001100;
    B = 8'b00001010;
	 S = 4'b1001;
    #10
	 A = 8'b00110000;
    B = 8'b01000000;
	 S = 4'b1010;
    #10
    A = 8'b00001111;
    B = 8'b01000101;
	 S = 4'b1011;
    #10
    A = 8'b01001100;
    B = 8'b00001111;
	 S = 4'b1100;
    #10
    A = 8'b10001100;
    B = 8'b00000011;
	 S = 4'b1101;
    #10
    A = 8'b10101100;
    B = 8'b10101010;
	 S = 4'b1110;
    #10
	 A = 8'b10101101;
    B = 8'b10101010;
	 S = 4'b1111;
	 $stop;
	 $finish;
end
endmodule
